                func    opcode
0000000 rs2 rs1 010 rd 0110011 SLT rshift_type 0 A = 32'b0, B= 32'b1 Out = 32b'0 

sign < check
A = 00000000000000000000000000000000
B = 10000000000000000000000000000001
Out=00000000000000000000000000000000

0000000 rs2 rs1 011 rd 0110011 SLTU rshift_type 0 rd = 1 if rs1 < rs2 unsigned

A = 00000000000000000000000000000000
B = 10000000000000000000000000000001
Out=00000000000000000000000000000001


0000000 rs2 rs1 101 rd 0110011 SRL rshift_type 1 shift value of rs1 to right by lower 5 bits of rs2 
A = 00000000000000000000000000000100
B = 00000000000000000000000000000010
Out=00000000000000000000000000000001
 
0100000 rs2 rs1 101 rd 0110011 SRA rshift_type 0 arithmetic right shift 
preserves signed bit

A = 10000000000000000000000000000100
B = 00000000000000000000000000000010
Out=10000000000000000000000000000001 

[106:100] = opcode
[99:97] = funct
[96] = add_rshift_type
[95:64] = A
[63:32] = B
[31:0] = REFout

LOAD 
A
0000 0000 0101 1011 1111 1110 1100 1010 1000 0110
B
0000 0000 1111 1101 0101 0000 0100 0001 0100 0100
Out
0000 0000 0101 1001 0100 1111 0000 1011 1100 1010

JAL
A
0000 0000 1010 1101 1001 1010 1111 0101 0111 0011
B
0000 0000 0001 0100 1110 0110 0000 0011 1110 0010
ref Out
0000 0000 0100 0010 1000 0000 1111 1001 0101 0101
my output 
0000 0000 1100 0010 1000 0000 1111 1001 0101 0101

A
0000 0000 0000 0111 1100 0111 0101 0000 0010 0000
B
0000 0000 0111 0010 0111 1001 1010 1000 1000 1100
ref out 
0000 0000 1111 1100 1111 0011 0110 1100 0011 0111
my out
0000 0000 0111 1100 1111 0011 0110 1100 0011 0111

testvector input for slt sltu srl sra

01100110100000000000000000000000000000000001000000000000000000000000000000100000000000000000000000000000000
01100110110000000000000000000000000000000001000000000000000000000000000000100000000000000000000000000000001
01100111011000000000000000000000000000001000000000000000000000000000000001000000000000000000000000000000001
01100111010100000000000000000000000000001000000000000000000000000000000001010000000000000000000000000000001
