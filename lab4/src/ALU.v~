// UC Berkeley CS150
// Lab 4, Fall 2014
// Module: ALU.v
// Desc:   32-bit ALU for the MIPS150 Processor
// Inputs: 
//    A: 32-bit value
//    B: 32-bit value
//    ALUop: Selects the ALU`s operation 
// 						
// Outputs:
//    Out: The chosen function mapped to A and B.

`include "Opcode.vh"
`include "ALUop.vh"

module ALU(
    input [31:0] A,B,
    input [3:0] ALUop,
    output reg [31:0] Out
);

// Signed operations; these are useful
    // for signed operations
    wire signed [31:0] B_signed, A_signed;
    assign B_signed = $signed(B);
	assign A_signed = $signed(A);

    wire signed_comp, unsigned_comp;
    assign signed_comp = ($signed(A) < $signed(B));
    assign unsigned_comp = A < B;
	reg [32:0] overflow;
    // Implement your ALU here, then delete this comment
	always@(*) begin
		case(ALUop)
		`ALU_ADD: Out = A + B;
		`ALU_ADDI:Out = (A + B) & 32'h7fffffff;
		`ALU_SUB: Out = A - B;
		`ALU_AND: Out = A&B;
		`ALU_OR:  Out = A|B;
		`ALU_XOR: Out = A^B;
		`ALU_SLT: Out = signed_comp; 
		`ALU_SLTU:Out = unsigned_comp; 
		`ALU_SLL: Out = A<<B[4:0];
		`ALU_SRA: Out = $signed(A)>>>B[4:0];
		`ALU_SRL: Out = A>>B[4:0]; //how to distinguish logical and arth
		`ALU_COPY_B: Out = B;
		`ALU_XXX: Out = 32'd0;
		default: Out = 32'd0; //what would be good default behavior?

		endcase
	end

endmodule
